// <auto-generated />
using System;
using LegalApp.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LegalApp.API.Migrations
{
    [DbContext(typeof(LegalAppDbContext))]
    [Migration("20250804172956_AddPaymentAndUpdateClientNote")]
    partial class AddPaymentAndUpdateClientNote
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LegalApp.API.Models.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("appointment_date");

                    b.Property<string>("AppointmentType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("appointment_type");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid")
                        .HasColumnName("client_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid>("LawFirmId")
                        .HasColumnType("uuid")
                        .HasColumnName("law_firm_id");

                    b.Property<string>("Priority")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LawFirmId");

                    b.ToTable("appointments", (string)null);
                });

            modelBuilder.Entity("LegalApp.API.Models.AppointmentConfirmation", b =>
                {
                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("appointment_id");

                    b.Property<DateTime?>("ConfirmedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("confirmed_at");

                    b.Property<bool?>("ConfirmedByClient")
                        .HasColumnType("boolean")
                        .HasColumnName("confirmed_by_client");

                    b.HasKey("AppointmentId");

                    b.ToTable("appointment_confirmations", (string)null);
                });

            modelBuilder.Entity("LegalApp.API.Models.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Details")
                        .HasColumnType("jsonb");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("entity_id");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("entity_type");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("audit_logs", (string)null);
                });

            modelBuilder.Entity("LegalApp.API.Models.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("CaseNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("case_number");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("full_name");

                    b.Property<Guid>("LawFirmId")
                        .HasColumnType("uuid")
                        .HasColumnName("law_firm_id");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("ProcessStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("process_status");

                    b.Property<string>("ProcessType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("process_type");

                    b.HasKey("Id");

                    b.HasIndex("LawFirmId");

                    b.ToTable("clients", (string)null);
                });

            modelBuilder.Entity("LegalApp.API.Models.ClientDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid")
                        .HasColumnName("client_id");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("document_type");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("file_url");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("boolean")
                        .HasColumnName("is_current");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("uploaded_at");

                    b.Property<Guid>("UploadedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("uploaded_by");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("UploadedBy");

                    b.ToTable("client_documents", (string)null);
                });

            modelBuilder.Entity("LegalApp.API.Models.ClientNote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid")
                        .HasColumnName("client_id");

                    b.Property<string>("Content")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<bool>("IsImportant")
                        .HasColumnType("boolean")
                        .HasColumnName("is_important");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("client_notes", (string)null);
                });

            modelBuilder.Entity("LegalApp.API.Models.LawFirm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("law_firms", (string)null);
                });

            modelBuilder.Entity("LegalApp.API.Models.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean")
                        .HasColumnName("is_read");

                    b.Property<string>("MessageText")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("message");

                    b.Property<Guid>("RecipientId")
                        .HasColumnType("uuid")
                        .HasColumnName("recipient_id");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uuid")
                        .HasColumnName("sender_id");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("sent_at");

                    b.Property<string>("Subject")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("RecipientId");

                    b.HasIndex("SenderId");

                    b.ToTable("messages", (string)null);
                });

            modelBuilder.Entity("LegalApp.API.Models.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid")
                        .HasColumnName("client_id");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("due_date");

                    b.Property<Guid>("LawFirmId")
                        .HasColumnType("uuid")
                        .HasColumnName("law_firm_id");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("paid_date");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("LawFirmId");

                    b.ToTable("payments", (string)null);
                });

            modelBuilder.Entity("LegalApp.API.Models.PaymentInstallment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateOnly>("DueDate")
                        .HasColumnType("date")
                        .HasColumnName("due_date");

                    b.Property<bool>("Paid")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("paid_at");

                    b.Property<Guid>("PaymentPlanId")
                        .HasColumnType("uuid")
                        .HasColumnName("payment_plan_id");

                    b.HasKey("Id");

                    b.HasIndex("PaymentPlanId");

                    b.ToTable("payment_installments", (string)null);
                });

            modelBuilder.Entity("LegalApp.API.Models.PaymentPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid")
                        .HasColumnName("client_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("total_amount");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("payment_plans", (string)null);
                });

            modelBuilder.Entity("LegalApp.API.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("full_name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("LegalApp.API.Models.UserLawFirm", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("LawFirmId")
                        .HasColumnType("uuid")
                        .HasColumnName("law_firm_id");

                    b.HasKey("UserId", "LawFirmId");

                    b.HasIndex("LawFirmId");

                    b.ToTable("user_law_firm", (string)null);
                });

            modelBuilder.Entity("LegalApp.API.Models.Appointment", b =>
                {
                    b.HasOne("LegalApp.API.Models.Client", "Client")
                        .WithMany("Appointments")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LegalApp.API.Models.User", "CreatedByUser")
                        .WithMany("CreatedAppointments")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LegalApp.API.Models.LawFirm", "LawFirm")
                        .WithMany("Appointments")
                        .HasForeignKey("LawFirmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LawFirm");
                });

            modelBuilder.Entity("LegalApp.API.Models.AppointmentConfirmation", b =>
                {
                    b.HasOne("LegalApp.API.Models.Appointment", "Appointment")
                        .WithOne("Confirmation")
                        .HasForeignKey("LegalApp.API.Models.AppointmentConfirmation", "AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("LegalApp.API.Models.AuditLog", b =>
                {
                    b.HasOne("LegalApp.API.Models.User", "User")
                        .WithMany("AuditLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LegalApp.API.Models.Client", b =>
                {
                    b.HasOne("LegalApp.API.Models.LawFirm", "LawFirm")
                        .WithMany("Clients")
                        .HasForeignKey("LawFirmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LawFirm");
                });

            modelBuilder.Entity("LegalApp.API.Models.ClientDocument", b =>
                {
                    b.HasOne("LegalApp.API.Models.Client", "Client")
                        .WithMany("Documents")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LegalApp.API.Models.User", "UploadedByUser")
                        .WithMany("UploadedDocuments")
                        .HasForeignKey("UploadedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("UploadedByUser");
                });

            modelBuilder.Entity("LegalApp.API.Models.ClientNote", b =>
                {
                    b.HasOne("LegalApp.API.Models.Client", "Client")
                        .WithMany("Notes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LegalApp.API.Models.User", "CreatedByUser")
                        .WithMany("CreatedNotes")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("LegalApp.API.Models.Message", b =>
                {
                    b.HasOne("LegalApp.API.Models.User", "Recipient")
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LegalApp.API.Models.User", "Sender")
                        .WithMany("SentMessages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Recipient");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("LegalApp.API.Models.Payment", b =>
                {
                    b.HasOne("LegalApp.API.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LegalApp.API.Models.LawFirm", "LawFirm")
                        .WithMany()
                        .HasForeignKey("LawFirmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("LawFirm");
                });

            modelBuilder.Entity("LegalApp.API.Models.PaymentInstallment", b =>
                {
                    b.HasOne("LegalApp.API.Models.PaymentPlan", "PaymentPlan")
                        .WithMany("Installments")
                        .HasForeignKey("PaymentPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentPlan");
                });

            modelBuilder.Entity("LegalApp.API.Models.PaymentPlan", b =>
                {
                    b.HasOne("LegalApp.API.Models.Client", "Client")
                        .WithMany("PaymentPlans")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("LegalApp.API.Models.UserLawFirm", b =>
                {
                    b.HasOne("LegalApp.API.Models.LawFirm", "LawFirm")
                        .WithMany("UserLawFirms")
                        .HasForeignKey("LawFirmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LegalApp.API.Models.User", "User")
                        .WithMany("UserLawFirms")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LawFirm");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LegalApp.API.Models.Appointment", b =>
                {
                    b.Navigation("Confirmation");
                });

            modelBuilder.Entity("LegalApp.API.Models.Client", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Documents");

                    b.Navigation("Notes");

                    b.Navigation("PaymentPlans");
                });

            modelBuilder.Entity("LegalApp.API.Models.LawFirm", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Clients");

                    b.Navigation("UserLawFirms");
                });

            modelBuilder.Entity("LegalApp.API.Models.PaymentPlan", b =>
                {
                    b.Navigation("Installments");
                });

            modelBuilder.Entity("LegalApp.API.Models.User", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("CreatedAppointments");

                    b.Navigation("CreatedNotes");

                    b.Navigation("ReceivedMessages");

                    b.Navigation("SentMessages");

                    b.Navigation("UploadedDocuments");

                    b.Navigation("UserLawFirms");
                });
#pragma warning restore 612, 618
        }
    }
}
